mlmcr Revision 1 Manual
=======================

- What is mlmcr?
Well, it's easy enough: mlmcr is a Python-derived programming language that feels like you are writing machine code into an old-style code monitor that does not like variable names and wants you to write all the variables as memory addresses (e.g. $0DC7). If you wonder, yes, it's as useless as hell (and as evil too).

- What if I make some mistake in the code?
Good luck. You are gonna need it. When something like a syntax error is found, the file that is being parsed will display an error message. Based on when the error appeared, you may be hinted towards a specific section of the file. Other than that, there isn't much else aiding you. But, if you are programming on the interpreter, the culprit line will be immediately identifiable, as the code throws an error after entering the instruction.

- How do I comment the code?
Lines that start with ; will be treated as comments. In-line comments aren't allowed.

- How do I run mlmcr?
If you have a *COMPILED* version of mlmcr:
Launch a terminal session (if you want).
Navigate into the directiory where mlmcr.exe is (or open it directly in a file browser).
To launch the mlmcr interpreter, write (without quotes):
'mlmcr.exe'
To execute a '.mlmcr' file, write:
'mlmcr.exe <file_path>'

If you have a *SOURCE* version of mlmcr:
Launch a terminal session.
Navigate into the directory where the mlmcr.py script is.
To launch the mlmcr interpreter, write (without quotes):
'python mlmcr.py'
To execute a '.mlmcr' file, write:
'python mlmcr.py <file_path>.mlmcr'

COMPLETE INSTRUCTION GUIDE
--------------------------
Note: operations with floating-point numbers will always store results as floating-point numbers, regardless of the amount of integer arguments.
Note: boolean values are generally omitted from this manual as rarely used, but can be used in a variety of instructions.

VARIABLES
-=-=-=-=-

PUT - assign a value to a variable
PUT #<int>, $<var> - assign an integer to a variable
PUT #0, $0         - assign integer 0 to $0
PUT ###<flpt>, $<var> - assign a floating-point number to a variable
PUT ##0.1, $0         - assign float 0.1 to $0
PUT &<str>, $<var> - assign a string to a variable
PUT &Test, $0      - assign string 'Test' to $0
PUT !<bool>, $<var> - assign a boolean to a variable
PUT !0, $0          - assign boolean 0 (false) to $0
PUT $<var>, $<var> - copy the first variable content to the second variable
PUT $0, $1         - copy $0 to $1

DEL - delete a variable
DEL $<var> - delete a variable
DEL $0     - delete $0

KILL - put a variable in the kill list
KILL $<var> - kill a variable
KILL $0     - kill $0
KILL $<var>, $<var> - kill a variable and get its index
KILL $0, $1         - kill $0 and store its index in $1
Killed variables are removed from the active variables and put into a special list, where they can be retrieved later. By default, the kill list can contain at most 256 variables: if another variable is killed, the oldest one stored is deleted.

WAKE - retrieve a variable from the kill list
WAKE $<var>/#<int>, $<var> - wake a variable
WAKE #0, $0                - wake the variable at index 0 and store it in $0
When variables are waked, they are removed from the kill list.

KSET - set the maximum lenght of the kill list
KSET $<var>/#<int> - set the kill lenght
KSET $0            - set the kill lenght to $0
If 0 is used as the lenght, the kill list gets disabled. The lenght of the list can't be higher than 65536. If a value smaller than 0 or higher than 65536 is used, it gets automatically corrected.

KGET - retrieve the highest index of the kill list
KGET $<var> - retrieve the highest index of the kill list
KGET $0     - retrieve the highest index of the kill list and store it in $0

ADD - sum variables and/or numbers and store the result in a variable
ADD $<var>/#<int>/###<flpt>, ..., $<var> - sum the arguments and store the result in a variable
ADD $0, $1, $2, $3                     - sum $0, $1 and $2 and store the result in $3
ADD $0, #10, ##3.14, $1                - sum $0, 10 and 3.14 and store the result in $1
ADD can have an arbitrary amount of arguments. The last one will always be the variable to store the result of the sum of the others into.

SUB - subtract variables and/or numbers and store the result in a variable
SUB $<var>/#<int>/###<flpt>, ..., $<var> - subtract the arguments and store the result in a variable
SUB $0, $1, $2, $3                      - subtract $0, $1 and $2 and store the result in $3
SUB $0, #10, ##3.14, $1                 - subtract $0, 10 and 3.14 and store the result in $1
SUB can have an arbitrary amount of arguments. The last one will always be the variable to store the result of the subtraction of the others into.

MUL - multiply variables and/or numbers and store the result in a variable
MUL $<var>/#<int>/##<flpt>, ..., $<var> - multiply the arguments and store the result in a variable
MUL $0, $1, $2, $3                     - multiply $0, $1 and $2 and store the result in $3
MUL $0, #10, ##3.14, $1                - multiply $0, 10 and 3.14 and store the result in $1
MUL can have an arbitrary amount of arguments. The last one will always be the variable to store the result of the multiplication of the others into.

DIV - divide variables and/or numbers and store the result in a variable
DIV $<var>/#<int>/##<flpt>, ..., $<var> - divide the arguments and store the result in a variable
DIV $0, $1, $2, $3                     - divide $0, $1 and $2 and store the result in $3
DIV $0, #10, ##3.14, $1                - divide $0, 10 and 3.14 and store the result in $1
DIV can have an arbitrary amount of arguments. The last one will always be the variable to store the result of the division of the others into.
DIV always stores results as floating-point numbers.

FDIV - floor divide variables and/or numbers and store the result in a variable
FDIV $<var>/#<int>/##<flpt>, ..., $<var> - f-divide the arguments and store the result in a variable
FDIV $0, $1, $2, $3                     - f-divide $0, $1 and $2 and store the result in $3
FDIV $0, #10, ##3.14, $1                - f-divide $0, 10 and 3.14 and store the result in $1
FDIV can have an arbitrary amount of arguments. The last one will always be the variable to store the result of the floor division of the others into.
FDIV always stores results as integer numbers.

MOD - calculate the remainder of variables and/or numbers and store the result in a variable
MOD $<var>/#<int>/##<flpt>, ..., $<var> - mod the arguments and store the result in a variable
MOD $0, $1, $2, $3                     - mod $0, $1 and $2 and store the result in $3
MOD $0, #10, ##3.14, $1                - mod $0, 10 and 3.14 and store the result in $1
MOD can have an arbitrary amount of arguments. The last one will always be the variable to store the result of the remainder calculation of the others into.
MOD always stores results as integer numbers.

POW - calculate the power of variables and/or numbers and store the result in a variable
POW $<var>/#<int>/##<flpt>, ..., $<var> - pow the arguments and store the result in a variable
POW $0, $1, $2, $3                     - pow $0, $1 and $2 and store the result in $3
POW $0, #10, ##3.14, $1                - pow $0, 10 and 3.14 and store the result in $1
POW can have an arbitrary amount of arguments. The last one will always be the variable to store the result of the power calculation of the others into.

INC - increment a variable
INC $<var> - increment a variable by 1
INC $0     - increment $0 by 1
INC $<var>, #<int> - increment a variable
INC $0, #2         - increment $0 by 2
INC implicitely converts floating-point numbers to integer numbers.

DEC - decrement a variable
DEC $<var> - decrement a variable by 1
DEC $0     - decrement $0 by 1
DEC $<var>, #<int> - decrement a variable
DEC $0, #2         - decrement $0 by 2
DEC implicitely converts floating-point numbers to integer numbers.

PUSH - print variables to screen
PUSH $<var>, ... - print the arguments
PUSH $0, $1, $2  - print $0, $1 and $2
PUSH can have an arbitrary amount of arguments. If you want to print a string put it in a variable first, as below:
PUT &This is a string, $0
PUSH $0

PULL - get a variable from user input
PULL $<var> - get a variable from user input
PULL $0     - get $0 from user input
PULL $<var>, &<str> - display a prompt and get a variable from user input
PULL $0, &Value:    - display 'Value: ' and get $0 from user input
PULL always stores user input as strings. If you need to get other variables types, convert them afterwards.

INT - convert a floating-point number or a string to an integer number
INT $<var> - convert a variable to integer
INT $0     - convert $0 to integer
INT $<var>, $<var> - store an integer-converted variable into another
INT $0, $1         - convert $0 to an integer and store it in $1
Some strings can't be converted to integer.

FLPT - convert an integer number or a string to a floating-point number
FLPT $<var> - convert a variable to floating-point
FLPT $0     - convert $0 to floating-point
FLPT $<var>, $<var> - store a floating-point-converted variable into another
FLPT $0, $1         - convert $0 to a floating-point and store it in $1
Some strings can't be converted to floating-point.

STR - convert an integer number or a floating-point number to a string
STR $<var> - convert a variable to string
STR $0     - convert $0 to string
STR $<var>, $<var> - store a string-converted variable into another
STR $0, $1         - convert $0 to a string and store it in $1

BOOL - convert a variable to a boolean
BOOL $<var> - convert a variable to boolean
BOOL $0     - convert $0 to boolean
BOOL $<var>, $<var> - store a boolean-converted variable into another
BOOL $0, $1         - convert $0 to a boolean and store it in $1

LINK - join two strings together
LINK $<var>, $<var>, $<var> - join two string variables and put the result in the third
LINK $0, $1, $2             - join $0 and $1 and put the result in $2
LINK &<str>, &<str>, $<var> - join variables and/or strings and put the result in the third argument
LINK $0, &Test, $1          - join $0 and the string 'Test' and put the result in $1

FSTR - split a string into a sequence
FSTR $<var>, $<var> - split the first variable into the second based on ' '
FSTR $0, $1         - split $0 into $1
FSTR $<var>, $<var>, &<str> - split the first variable into the second based on the third var/str
FSTR $0, $1, $2             - split $0 into $1 based on $2

TSTR - join a sequence into a string
TSTR $<var>, $<var> - join the first variable into the second with ' '
TSTR $0, $1         - join $0 into $1
TSTR $<var>, $<var>, &<str> - join the first variable into the second with the third var/str
TSTR $0, $1, $2             - join $0 into $1 into $2

ARRAYS
-=-=-=

SEQ - build a sequence
SEQ $<var> - build an empty sequence
SEQ $0     - build $0
SEQ $<var>, $<var>/#<int>/##<flpt>/&<str>, ... - build a sequence from the arguments
SEQ $0, #1, ##3.14, &Test                      - build $0 from 1, 3.14 and 'Test'
SEQ can have an arbitrary amount of arguments.

PSEQ - build a permanent sequence
PSEQ $<var> - build an empty permanent sequence
PSEQ $0     - build $0
PSEQ $<var>, $<var>/#<int>/##<flpt>/&<str>, ... - build a permanent sequence from the arguments
PSEQ $0, #1, ##3.14, &Test                      - build $0 from 1, 3.14 and 'Test'
PSEQ can have an arbitrary amount of arguments.
Permanent sequences work just like sequences, except the items become read-only after joining.

PACK - pack variables
PACK $<var>, $<var>/#<int>/##<flpt>/&<str>, ... - pack the arguments into a variable
PACK $0, #1, ##3.14, &Test                      - pack 1, 3.14 and 'Test' into $0
Variable packs can't be modified at all after building it, so an empty variable pack is useless.

JOIN - add items to an array
JOIN $<var>, $<var>/#<int>/##<flpt>/&<str>, ... - add the arguments to the array
JOIN $0, #1, ##3.14, &Test                      - add 1, 3.14 and 'Test' to $0
JOIN can have an arbitrary amount of arguments.
If you use JOIN like this:
JOIN $<var>, $<seq/pseq/pack>,
the target array is extended with the items of the array in the arguments.
Use NEST if you want to simply append an array to an array.

NEST - add an array to an array
NEST $<var>, $<var>, ... - nest the arguments into the array
NEST $0, $1              - nest $1 into $0
NEST can have an arbitrary amount of arguments.
Non-array arguments are ignored by NEST.

POP - remove an item from an array based on its index
POP $<var>, $<var>/#<int> - remove an item from the array based on its index
POP $0, #0                - remove item at index 0 from $0
POP $<var>, $<var>/#<int>, $<var> - remove an item from the array based on its index and store it
POP $0, $1, $2            - remove item at index $1 from $0 and store it in $2
If you want to remove the last item added to an array, use POP like this:
POP $0, #-1 (or POP $0, #-1, $1 if you want to get its value)

REM - remove an item from an array based on its value
REM $<var>, $<var>/#<int>/##<flpt>/&<str> - remove an item from the array based on its value
REM $0, &Test                             - remove 'Test' from $0
If more than one occurence of the value exists, REM will only remove the first.

GETI - get the index of a value in an array
GETI $<var>, $<var>/#<int>/##<flpt>/&<str>, $<var> - get the index of a value in an array
GETI $0, #0, $1                                    - get the index of 0 in $0 and store it in $1

GET - get a value in an array based on its index
GET $<var>, $<var>/#<int>, $<var> - get a value in an array based on its index
GET $0, #0, $1                    - get the value in $0 at index 0 and store it in $1

SET - insert a value in array before a given index
SET $<var>, $<var>/#<int>, $<var>/#<int>/##<flpt>/&<str> - insert a value in the array before index
SET $0, $1, &Test                                        - insert 'Test' before $1 in $0

REPL - replace a value in an array based on its index
REPL $<var>, $<var>/#<int>, $<var>/#<int>/##<flpt>/&<str> - replace a value in the array
REPL $0, #0, $1                                           - replace index 0 in $0 with $1

LEN - get the lenght of an array
LEN $<var>, $<var> - get the lenght of the array
LEN $0, $1         - get the lenght of $0 and store it in $1

IN - check if a value is in an array
IN $<var>, $<var>/#<int>/##<flpt>/&<str>, $<var> - check if a value is in the array
IN $0, &Test, $1                                 - check if 'Test' is in $0 and store it in $1

WIPE - clear an array of its items
WIPE $<var> - clear the array
WIPE $0     - clear $0

OTHER INSTRUCTIONS
-=-=-=-=-=-=-=-=-=

HALT - delay code execution
HALT $<var>/#<int>/##<flpt> - halt the process
HALT ##3.14                 - halt the process for 3.14 seconds

EXIT - quit the current script or interpreter
EXIT - quit

PYEVAL - evaluate a Python expression
PYEVAL <expression> - evaluate an expression
PYEVAL <expression>, $<var> - evaluate an expression and store the result in a variable
PYEVAL might not work with every expression.

PYEXEC - execute Python code
PYEXEC <code> - execute code
PYEXEC might not work with every code piece.