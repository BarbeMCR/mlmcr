name >>_default

pyblock
def mltry(args):  # TRY call, [args..., return]  (call:SUBR|FUNC|PROC, args...:*, return:->{*})
    def _mltry(args):
        init_try()
        if len(args) == 1:
            call(args[0])
        else:
            r = call(args[0], args[1:-1])
            this().set_var(args[-1], r)
    atleast(_mltry, args, 1)

def mlwhen(args):  # WHEN error, call, [args..., return]  (error:STR|'*', call:SUBR|FUNC|PROC, args...:*, return:->{*})
    def _mlwhen(args):
        if len(args) == 2:
            run_when(args[0], args[1])
        else:
            r = run_when(args[0], args[1], args[2:-1])
            this().set_var(args[-1], r)
    atleast(_mlwhen, args, 2)

def mlace(args):  # ACE call, [args..., return]  (call:SUBR|FUNC|PROC, args...:*, return:->{*})
    def _mlace(args):
        if len(args) == 1:
            run_ace(args[0])
        else:
            r = run_ace(args[0], args[1:-1])
            this().set_var(args[-1], r)
    atleast(_mlace, args, 1)

def mlthen(args):  # THEN call, [args..., return]  (call:SUBR|FUNC|PROC, args...:*, return:->{*})
    def _mlthen(args):
        if len(args) == 1:
            run_then(args[0])
        else:
            r = run_then(args[0], args[1:-1])
            this().set_var(args[-1], r)
    atleast(_mlthen, args, 1)

def stop(args):  # STOP  ()
    def _stop(args):
        uninit_try()
    when(_stop, args, 0)

def cast(args):  # CAST error, [message]  (error:STR, message:STR)
    def _cast(args):
        if len(args) == 1:
            throw(args[0])
        else:
            throw(args[0], args[1])
    between(_cast, args, 1, 2)

bind(mltry, 'TRY')
bind(mlwhen, 'WHEN')
bind(mlace, 'ACE')
bind(mlthen, 'THEN')
bind(stop, 'STOP')
bind(cast, 'CAST')
pyend
